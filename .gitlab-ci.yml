# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages: # List of stages for jobs, and their order of execution
    - build
    - docker
    - test
    - deploy

build-job: # This job runs in the build stage, which runs first.
    stage: build
    # Tags a runner must have to run this job
    tags:
        - gitlab-org-docker
    image: golang:latest
    artifacts:
        untracked: true
        when: on_success
    script:
        - echo "Compiling the code..."
        - go build cmd/main.go
        - echo "Compile complete."

build-image:
    stage: docker
    image: gitlab-org-docker
    services:
        - docker:dind
    script:
        - docker $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
        - docker build -t registry.gitlab.com/zachdehooge/radar-database .
        - docker push registry.gitlab.com/zachdehooge/radar-database

unit-test-job: # This job runs in the test stage.
    stage: test
    tags:
        - gitlab-org-docker
    image: golang:latest # It only starts when the job in the build stage completes successfully.
    script:
        - echo "Running unit tests..."
        - go test cmd/main_test.go
        - echo "Unit Tests Complete"

lint-test-job: # This job also runs in the test stage.
    stage: test # It can run at the same time as unit-test-job (in parallel).
    tags:
        - gitlab-org-docker
    image: golang:latest # It only starts when the job in the build stage completes successfully.
    script:
        - echo "Linting code... This will take about 10 seconds."
        - sleep 10
        - echo "No lint issues found."

deploy-job: # This job runs in the deploy stage.
    stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
    tags:
        - gitlab-org-docker
    image: golang:latest # It only starts when the job in the build stage completes successfully.
    environment: production
    script:
        - echo "Deploying application..."
        - echo "Application successfully deployed."
